---
import Layout from "../../../layouts/Layout.astro";
import { codeHighlight } from "../../../util/code-highlight";
import speculationPrerender from "../../../images/speculation-prerender.png";
import renderBlocking from "../../../images/render-blocking-logic.jpg";

const codeBlocks = await Promise.all([
  codeHighlight(`<script type="speculationrules">
  {
    "prerender": [{
      "where": {
          "href_matches": "/*"
      },
      "eagerness": "eager"
    }]
  }
</script>`),
  codeHighlight(`<script type="module" blocking="render">
  const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  const colorThemeElement = document.querySelector('[data-id="colorTheme"]');

  colorThemeElement.textContent = isDark ? "dark" : "light";
</script>`),
]);
---

<script type="module">
  const response = await fetch("https://jsonplaceholder.typicode.com/todos/1");
  const data = await response.json();
  const typicodeElement = document.querySelector("#typicode");

  if (typicodeElement) {
    typicodeElement.textContent = JSON.stringify(data);
  }
</script>
<script type="module" blocking="render">
  const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  const colorThemeElement = document.querySelector('[data-id="colorTheme"]');

  colorThemeElement.textContent = isDark ? "dark" : "light";
</script>
<Layout
  title="Client Side Server Rendering"
  description="Can we can an SSR like experience without server side javascript?"
>
  <main>
    <article>
      <header><h1>Client Side Server Rendering</h1></header>
      <p>
        There has been a lot of debate around SSR vs. CSR, especially since
        NextJS became the "officially recommended framework" for React. It seems
        like most of the discussion comes from people who's first real
        experience with SSR and React is with NextJS 14. And I have to be
        honest, that's a rough entry.
      </p>
      <p>
        But if you've been working with server rendered React for a long time,
        you're familiar with typical issues.
      </p>
      <ol>
        <li>
          A time for an event comes from the server and you want to convert it
          to the users local time.
        </li>
        <li>
          You want to default to using OS settings (prefers-color-scheme) for
          dark mode/light mode, but also allow users to optionally override that
          with a local storage value.
        </li>
        <li>
          You have a third party API you're pulling from that's a little too
          slow and a little too fast. A loading spinner shows up for 50ms.
          Barely enough to be perceivable, but super annoying.
        </li>
        <li>
          You have to guess at the size of dynamic content to avoid content
          layout shifts.
        </li>
      </ol>
      <p>
        These problems are not easy. They require hacks like placeholders and
        loading spinners for content that is otherwise nearly instant.
      </p>
      <p>
        There are two new browser APIs that help with this considerably, however
        they are only available in Chromium based browsers.
      </p>
      <ul>
        <li>
          <a
            href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API"
            target="_blank">Speculation Rules API</a
          >
        </li>
        <li>
          <a
            href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#blocking"
            target="_blank"
            >The blocking attribute for <code>&lt;script&gt;</code></a
          >
        </li>
      </ul>
      <h2>Speculation API</h2>
      <p>
        The Speculation Rules API allows you to completely prerender pages in
        the browsers cache. That's not the same as prefetching a link which
        downloads an individual resource. It means pre-rendering an entire
        document. Fetches and local storage pulls included.
      </p>
      <p>
        As an example, one very small script in your site headers can give you
        instant navigations.
      </p>
      <Fragment set:html={codeBlocks[0]} />
      <p>
        The limit of how many links a browser will prerender is up to the
        browser, Chrome will only prerender 10. So in many cases it's likely
        smart to choose what you want to prerender per page.
      </p>
      <p style="display: grid; place-items: center;">
        <img
          width="80%"
          src={speculationPrerender.src}
          alt="Speculation rules API used on homepage prerendering 10 links"
        />
      </p>
      <p>
        This simple API gives you instant navigations faster than "SPA" with
        "MPA" aka server side routing. What's this means is if you fetched any
        data on a page that is prerendered, you still benefit from that instant
        navigation. For example, this comes from typicode:
      </p>
      <p>
        <code id="typicode"></code>
      </p>
      <p>
        Try navigating to <a
          href="/blog/client-side-server-rendering/placeholder">this page</a
        > and back. Do you see a flash of no data, or is the data instantly there?
        It should be instant. No jump. You could say, "cheater, cheater, pumpkin
        eater, you're using view transtions!". But you'll have to take my word for
        it that this does not help with async data. If the data load is slower than
        the transition (it most likely always will be), you still see that data pop
        in after render.
      </p>
      <p>
        But there is still one major glaring issue with this. <strong
          >It only works with a maximum of 10 navigations linked from the
          current page you're already on.</strong
        > So there is a limit, and it does not work for initial load. Try refreshing
        this page and you'll see the data above pop in.
      </p>
      <h2>blocking="render"</h2>
      <p>
        I talked about this one in <a
          href="/blog/defense-of-xmlhttprequest-blocking-render/"
          >In Defense of XMLHttpRequest and Blocking Render</a
        >, so I won't go too much into how it works. But what it allows us to do
        is get data from browser storage and apply that to the page before
        render. For example, the color theme you have set on your OS is for <strong
          data-id="colorTheme"></strong> mode. You can try updating your OS settings
        and refreshing to test if it works. Although beware of the "jump" caused
        by fetching the data above. But again, this value loads instantly, no risk
        of it "popping in" after everything else has loaded. And here's the code:
      </p>
      <Fragment set:html={codeBlocks[1]} />
      <p>
        However, there's a major problem here too. async data fetches won't
        block render. Because they run on another thread. As I talked about "In
        Defense of Blocking Render...", this is mostly a good thing, except for
        when you want more control over render.
      </p>
      <p>
        blocker="render" is new and <a
          target="_blank"
          href="https://github.com/whatwg/fetch/issues/1433"
          >the option to allow fetch to block renders is in draft</a
        >. But if we could block render for fetch that gives us a lot more
        control over how we deal with all of the problems mentioned at the start
        of this article.
      </p>
      <h2>Prerender Logic?</h2>
      <p>
        How do we get the results of the Speculation API on initial render?
        Basically, we want to define some logic to create or update the view
        before the user sees it. This all happens during the navigation state in
        which the browser tab is showing it's spinner.
      </p>
      <p style="display: grid; place-items: center">
        <img
          width="80%"
          alt="picture representing the idea of running prerender logic"
          src={renderBlocking.src}
        />
      </p>
      <ol>
        <li>
          <s
            >A time for an event comes from the server and you want to convert
            it to the users local time.</s
          >
          <strong>Solved.</strong>
        </li>
        <li>
          <s
            >You want to default to using OS settings (prefers-color-scheme) for
            dark mode/light mode, but also allow users to optionally override
            that with a local storage value.</s
          >
          <strong>Solved.</strong>
        </li>
        <li>
          <s
            >You have a third party API you're pulling from that's a little to
            slow and a little too fast. A loading spinner shows up for 50ms.
            Barely enough to be perceivable, but super annoying.</s
          >
          <strong>Solved.</strong>
        </li>
        <li>
          <s
            >You have to guess at the size of dynamic content to avoid content
            layout shifts.</s
          >
          <strong>Solved.</strong>
        </li>
      </ol>
      <p>
        All the talk about streaming, partial rendering, parallel routes,
        increasing HTML payload to sync state... What if we just allowed the
        client to handle the client?
      </p>
      <p>
        A lot of the people who are coming into SSR for the first time are
        frustrated with having to deal with all these problems, to include
        endless hydration errors.
      </p>
      <p>
        Some people complain about having to deploy a second server for
        "frontend" when their API&apos;s are on other services.
      </p>
      <p>
        What if it were possible to do CDN deployments for frontends, and still
        get that SSR experience? Worried about performance? Server and client
        caching are still things. (Don't forget about Speculation and Cache
        APIs.)
      </p>
      <p>
        I don't see any loss in this idea. As someone who has been pushing SSR
        for half a decade, I feel like browsers and JS standards are getting
        real close to making CSR viable.
      </p>
    </article>
  </main>
</Layout>
