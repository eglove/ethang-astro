<script type="module">
    let serviceWorkerRegistration;
    /**
     * @type {ServiceWorker | null}
     */
    let serviceWorker;

    initServiceWorker().catch(console.error)

    async function initServiceWorker() {
        serviceWorkerRegistration = await navigator.serviceWorker.register(
            "/scripts/cache.js",
            {
                updateViaCache: "none",
            },
        );

        serviceWorker =
            serviceWorkerRegistration.installing ??
            serviceWorkerRegistration.waiting ??
            serviceWorkerRegistration.active;
        sendStatusUpdate(serviceWorker);

        navigator.serviceWorker.addEventListener("controllerchange", () => {
            serviceWorker = navigator.serviceWorker.controller;
            sendStatusUpdate(serviceWorker);
        });

        navigator.serviceWorker.addEventListener("message", onServiceWorkerMessage);
    }

    function onServiceWorkerMessage(event) {
        const { data } = event;

        if (data.requestStatusUpdate) {
            sendStatusUpdate(event.ports && event.ports[0]);
        }
    }

    function sendStatusUpdate(target) {
        sendServiceWorkerMessage(
            {
                urlsToCache: getUrsToCache(),
            },
            target
        )
    }

    function sendServiceWorkerMessage(message, target) {
        if (target) {
            target.postMessage(message);
        } else if (serviceWorker) {
            serviceWorker.postMessage(message);
        } else {
            navigator.serviceWorker.controller?.postMessage(message);
        }
    }

    function getUrsToCache() {
        /** @type string[] */
        const links = [];

        for (const element of [...document.links, document.styleSheets]) {
            if (element.href) {
                const parsed = new URL(element.href);

                if (parsed.origin === location.origin) {
                    links.push(parsed.pathname);
                }
            }
        }

        for (const element of [...document.images, ...document.scripts]) {
            if (element.src) {
                const parsed = new URL(element.src);

                if (parsed.origin === location.origin) {
                    links.push(parsed.pathname);
                }
            }
        }

        return links.filter(Boolean);
    }
</script>
